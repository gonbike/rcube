/*
	This class is autogenerated by BuildOpenCVProxy. 
*/
using System;
using System.Runtime.InteropServices;

namespace OpenCVProxy.Interop
{
    public static partial class HighGui
    {
        const string HighGuiDllName = "highgui110.dll";

        public static void InitializeLibrary()
        {
			IntPtr ptr = LoadLibrary(HighGuiDllName);
        }

        [DllImport("kernel32.dll")]
        private static extern IntPtr LoadLibrary(string name);

		public const int CV_WINDOW_AUTOSIZE = 1;
		public const int CV_EVENT_MOUSEMOVE = 0;
		public const int CV_EVENT_LBUTTONDOWN = 1;
		public const int CV_EVENT_RBUTTONDOWN = 2;
		public const int CV_EVENT_MBUTTONDOWN = 3;
		public const int CV_EVENT_LBUTTONUP = 4;
		public const int CV_EVENT_RBUTTONUP = 5;
		public const int CV_EVENT_MBUTTONUP = 6;
		public const int CV_EVENT_LBUTTONDBLCLK = 7;
		public const int CV_EVENT_RBUTTONDBLCLK = 8;
		public const int CV_EVENT_MBUTTONDBLCLK = 9;
		public const int CV_EVENT_FLAG_LBUTTON = 1;
		public const int CV_EVENT_FLAG_RBUTTON = 2;
		public const int CV_EVENT_FLAG_MBUTTON = 4;
		public const int CV_EVENT_FLAG_CTRLKEY = 8;
		public const int CV_EVENT_FLAG_SHIFTKEY = 16;
		public const int CV_EVENT_FLAG_ALTKEY = 32;
		public const int CV_LOAD_IMAGE_GRAYSCALE = 0;
		public const int CV_LOAD_IMAGE_COLOR = 1;
		public const int CV_LOAD_IMAGE_ANYDEPTH = 2;
		public const int CV_LOAD_IMAGE_ANYCOLOR = 4;
		public const int CV_CVTIMG_FLIP = 1;
		public const int CV_CVTIMG_SWAP_RB = 2;
		public const int CV_CAP_V4L = 200;
		public const int CV_CAP_V4L2 = 200;
		public const int CV_CAP_FIREWIRE = 300;
		public const int CV_CAP_IEEE1394 = 300;
		public const int CV_CAP_DC1394 = 300;
		public const int CV_CAP_CMU1394 = 300;
		public const int CV_CAP_TYZX = 400;
		public const int CV_TYZX_LEFT = 400;
		public const int CV_TYZX_RIGHT = 401;
		public const int CV_TYZX_COLOR = 402;
		public const int CV_TYZX_Z = 403;
		public const int CV_CAP_PROP_POS_MSEC = 0;
		public const int CV_CAP_PROP_POS_FRAMES = 1;
		public const int CV_CAP_PROP_POS_AVI_RATIO = 2;
		public const int CV_CAP_PROP_FRAME_WIDTH = 3;
		public const int CV_CAP_PROP_FRAME_HEIGHT = 4;
		public const int CV_CAP_PROP_FPS = 5;
		public const int CV_CAP_PROP_FOURCC = 6;
		public const int CV_CAP_PROP_FRAME_COUNT = 7;
		public const int CV_CAP_PROP_FORMAT = 8;
		public const int CV_CAP_PROP_MODE = 9;
		public const int CV_CAP_PROP_BRIGHTNESS = 10;
		public const int CV_CAP_PROP_CONTRAST = 11;
		public const int CV_CAP_PROP_SATURATION = 12;
		public const int CV_CAP_PROP_HUE = 13;
		public const int CV_CAP_PROP_GAIN = 14;
		public const int CV_CAP_PROP_CONVERT_RGB = 15;

		/// <summary>
		///  this function is used to set some external parameters in case of X Window 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvInitSystem", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvInitSystem(int argc, IntPtr argv);

		[DllImport(HighGuiDllName, EntryPoint = "cvStartWindowThread", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvStartWindowThread();

		/// <summary>
		///  create window 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvNamedWindow", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvNamedWindow([MarshalAs(UnmanagedType.LPStr)] string name, int flags);

		/// <summary>
		///  display image within window (highgui windows remember their content) 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvShowImage", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvShowImage([MarshalAs(UnmanagedType.LPStr)] string name, IntPtr image);

		/// <summary>
		///  resize/move window 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvResizeWindow", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvResizeWindow([MarshalAs(UnmanagedType.LPStr)] string name, int width, int height);

		[DllImport(HighGuiDllName, EntryPoint = "cvMoveWindow", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvMoveWindow([MarshalAs(UnmanagedType.LPStr)] string name, int x, int y);

		/// <summary>
		///  destroy window and all the trackers associated with it 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvDestroyWindow", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvDestroyWindow([MarshalAs(UnmanagedType.LPStr)] string name);

		[DllImport(HighGuiDllName, EntryPoint = "cvDestroyAllWindows", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvDestroyAllWindows();

		/// <summary>
		///  get native window handle (HWND in case of Win32 and Widget in case of X Window) 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvGetWindowHandle", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvGetWindowHandle([MarshalAs(UnmanagedType.LPStr)] string name);

		/// <summary>
		///  get name of highgui window given its native handle 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvGetWindowName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		[return:MarshalAs(UnmanagedType.LPStr)]
		public static extern string cvGetWindowName(IntPtr window_handle);

		/// <summary>
		///  create trackbar and display it on top of given window, set callback 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvCreateTrackbar", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvCreateTrackbar([MarshalAs(UnmanagedType.LPStr)] string trackbar_name, [MarshalAs(UnmanagedType.LPStr)] string window_name, IntPtr value, int count, IntPtr on_change);

		/// <summary>
		///  retrieve or set trackbar position 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvGetTrackbarPos", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvGetTrackbarPos([MarshalAs(UnmanagedType.LPStr)] string trackbar_name, [MarshalAs(UnmanagedType.LPStr)] string window_name);

		[DllImport(HighGuiDllName, EntryPoint = "cvSetTrackbarPos", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvSetTrackbarPos([MarshalAs(UnmanagedType.LPStr)] string trackbar_name, [MarshalAs(UnmanagedType.LPStr)] string window_name, int pos);

		/// <summary>
		///  assign callback for mouse events 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvSetMouseCallback", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvSetMouseCallback([MarshalAs(UnmanagedType.LPStr)] string window_name, IntPtr on_mouse, IntPtr param);

		/// <summary>
		///  load image from file
		///   iscolor can be a combination of above flags where CV_LOAD_IMAGE_UNCHANGED
		///   overrides the other flags
		///   using CV_LOAD_IMAGE_ANYCOLOR alone is equivalent to CV_LOAD_IMAGE_UNCHANGED
		///   unless CV_LOAD_IMAGE_ANYDEPTH is specified images are converted to 8bit
		/// 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvLoadImage", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvLoadImage([MarshalAs(UnmanagedType.LPStr)] string filename, int iscolor);

		[DllImport(HighGuiDllName, EntryPoint = "cvLoadImageM", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvLoadImageM([MarshalAs(UnmanagedType.LPStr)] string filename, int iscolor);

		/// <summary>
		///  save image to file 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvSaveImage", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvSaveImage([MarshalAs(UnmanagedType.LPStr)] string filename, IntPtr image);

		/// <summary>
		///  utility function: convert one image to another with optional vertical flip 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvConvertImage", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvConvertImage(IntPtr src, IntPtr dst, int flags);

		/// <summary>
		///  wait for key event infinitely (delay<=0) or for "delay" milliseconds 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvWaitKey", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvWaitKey(int delay);

		/// <summary>
		///  start capturing frames from video file 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvCreateFileCapture", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvCreateFileCapture([MarshalAs(UnmanagedType.LPStr)] string filename);

		/// <summary>
		///  start capturing frames from camera: index = camera_index + domain_offset (CV_CAP_*) 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvCreateCameraCapture", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvCreateCameraCapture(int index);

		/// <summary>
		///  grab a frame, return 1 on success, 0 on fail.
		///   this function is thought to be fast               
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvGrabFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvGrabFrame(IntPtr capture);

		/// <summary>
		///  get the frame grabbed with cvGrabFrame(..)
		///   This function may apply some frame processing like
		///   frame decompression, flipping etc.
		///   !!!DO NOT RELEASE or MODIFY the retrieved frame!!! 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvRetrieveFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvRetrieveFrame(IntPtr capture);

		/// <summary>
		///  Just a combination of cvGrabFrame and cvRetrieveFrame
		///    !!!DO NOT RELEASE or MODIFY the retrieved frame!!!      
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvQueryFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvQueryFrame(IntPtr capture);

		/// <summary>
		///  stop capturing/reading and free resources 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvReleaseCapture", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvReleaseCapture(IntPtr capture);

		/// <summary>
		///  retrieve or set capture properties 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvGetCaptureProperty", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern double cvGetCaptureProperty(IntPtr capture, int property_id);

		[DllImport(HighGuiDllName, EntryPoint = "cvSetCaptureProperty", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvSetCaptureProperty(IntPtr capture, int property_id, double value);

		/// <summary>
		///  initialize video file writer 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvCreateVideoWriter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern IntPtr cvCreateVideoWriter([MarshalAs(UnmanagedType.LPStr)] string filename, int fourcc, double fps, CvSize frame_size, int is_color);

		/// <summary>
		///  write frame to video file 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvWriteFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern int cvWriteFrame(IntPtr writer, IntPtr image);

		/// <summary>
		///  close video file writer 
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvReleaseVideoWriter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvReleaseVideoWriter(IntPtr writer);

		/// <summary>
		/// ***************************************************************************************\
		/// *                              Obsolete functions/synonyms                               *
		/// \***************************************************************************************
		/// </summary>
		[DllImport(HighGuiDllName, EntryPoint = "cvSetPreprocessFuncWin32", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvSetPreprocessFuncWin32(IntPtr on_preprocess);

		[DllImport(HighGuiDllName, EntryPoint = "cvSetPostprocessFuncWin32", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		public static extern void cvSetPostprocessFuncWin32(IntPtr on_postprocess);
	}
}
